using Microsoft.AspNetCore.Mvc;
using {{ModuleName}}.Service.DTO;
using {{ModuleName}}.Service.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using System.Net;

namespace {{ModuleName}}.Api.Controllers;
[Route("api/[controller]")]
[ApiController]
public class {{ModuleName}}Controller : ControllerBase
{
    private readonly I{{ModuleName}}Service _service;

    public {{ModuleName}}Controller(I{{ModuleName}}Service service)
    {
        _service = service;
    }

    /// <summary>
    ///     Get List {{ModuleName}}
    /// </summary>
    /// <returns></returns>        
    [HttpGet(Name = "{{ModuleNameLowerCase}}.getlist")]
    [SwaggerOperation(Tags = new[] { "{{ModuleName}}" })]
    [ProducesResponseType(typeof(List<{{ModuleName}}Reponse>), ((int)HttpStatusCode.OK))]
    public async Task<ActionResult<List<{{ModuleName}}Reponse>>> GetListAsync([FromQuery] List{{ModuleName}}Request request)
    {
        if (ModelState.IsValid)
        {
            return Ok(await _service.GetListAsync(request));
        }
        throw new Exception("Model is invalid");
    }

    /// <summary>
    ///     Get Detail {{ModuleName}}
    /// </summary>
    /// <returns></returns>        
    [HttpGet("{id}", Name = "{{ModuleNameLowerCase}}.getdetail")]
    [SwaggerOperation(Tags = new[] {"{{ModuleName}}" })]
    [ProducesResponseType(typeof({{ModuleName}}Reponse), ((int)HttpStatusCode.OK))]
    public async Task<ActionResult<{{ModuleName}}Reponse>> GetDetailAsync(int id)
    {
        if(ModelState.IsValid)
        { 
            return Ok(await _service.GetDetailAsync(id));  
        }
        throw new Exception("Model is invalid");
    }

    /// <summary>
    ///    Create {{ModuleName}}
    /// </summary>
    /// <returns></returns>        
    [HttpPost(Name = "{{ModuleNameLowerCase}}.create")]
    [SwaggerOperation(Tags = new[] { "{{ModuleName}}" })]
    [ProducesResponseType(typeof({{ModuleName}}Reponse), ((int)HttpStatusCode.OK))]
    public async Task<ActionResult<{{ModuleName}}Reponse>> CreatAsync({{ModuleName}}CreateRequest request)
    {
        if (ModelState.IsValid)
        {
            return Ok(await _service.CreateAsync(request));
        }
        throw new Exception("Model is invalid");
    }

    /// <summary>
    ///     Update {{ModuleName}}
    /// </summary>
    /// <returns></returns>        
    [HttpPut("{id}", Name = "{{ModuleNameLowerCase}}.update")]
    [SwaggerOperation(Tags = new[] { "{{ModuleName}}" })]
    [ProducesResponseType(typeof({{ModuleName}}Reponse), ((int)HttpStatusCode.OK))]
    public async Task<ActionResult<{{ModuleName}}Reponse>> UpdateAsync(int id, {{ModuleName}}UpdateRequest request)
    {
        if (ModelState.IsValid)
        {
            return Ok(await _service.UpdateAsync(id, request));
        }
        throw new Exception("Model is invalid");
    }

    /// <summary>
    ///     Delete {{ModuleName}}
    /// </summary>
    /// <returns></returns>        
    [HttpDelete("{id}", Name = "{{ModuleNameLowerCase}}.delete")]
    [SwaggerOperation(Tags = new[] { "{{ModuleName}}" })]
    [ProducesResponseType(((int)HttpStatusCode.NoContent))]
    public async Task<NoContentResult> DeleteAsync(int id)
    {
        if (ModelState.IsValid)
        {
            await _service.DeleteAsync(id);
            return NoContent();
        }
        throw new Exception("Model is invalid");
    }
}
